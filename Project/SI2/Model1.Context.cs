//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SI2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SI2Entities : DbContext
    {
        public SI2Entities()
            : base("name=SI2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Consumidor> Consumidores { get; set; }
        public virtual DbSet<EntregasFranqueado> EntregasFranqueados { get; set; }
        public virtual DbSet<Fornecedor> Fornecedores { get; set; }
        public virtual DbSet<Franqueado> Franqueados { get; set; }
        public virtual DbSet<HistoricoVenda> HistoricoVendas { get; set; }
        public virtual DbSet<PedidosFranqueado> PedidosFranqueados { get; set; }
        public virtual DbSet<PedidosProduto> PedidosProdutos { get; set; }
        public virtual DbSet<Produto> Produtos { get; set; }
        public virtual DbSet<RespostaPedido> RespostaPedidos { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Venda> Vendas { get; set; }
    
        public virtual int CloseVenda(Nullable<int> cid, Nullable<int> tid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseVenda", cidParameter, tidParameter);
        }
    
        public virtual int DeleteFranqueado(Nullable<int> fid)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFranqueado", fidParameter);
        }
    
        public virtual int DeleteProduto(Nullable<int> codigo_produto)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduto", codigo_produtoParameter);
        }
    
        public virtual int ForceDeleteProduto(Nullable<int> codigo_produto)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ForceDeleteProduto", codigo_produtoParameter);
        }
    
        public virtual int InsertConsumidor(Nullable<int> cid, string nome)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsumidor", cidParameter, nomeParameter);
        }
    
        public virtual int InsertFranqueado(Nullable<int> nif, string nome, string morada)
        {
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            var moradaParameter = morada != null ?
                new ObjectParameter("morada", morada) :
                new ObjectParameter("morada", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFranqueado", nifParameter, nomeParameter, moradaParameter);
        }
    
        public virtual int InsertProduto(Nullable<int> codigo, string tipo, string descricao, Nullable<int> quantidade, Nullable<int> quantidade_minima, Nullable<int> quantidade_maxima, Nullable<int> armazem)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("descricao", descricao) :
                new ObjectParameter("descricao", typeof(string));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("quantidade", quantidade) :
                new ObjectParameter("quantidade", typeof(int));
    
            var quantidade_minimaParameter = quantidade_minima.HasValue ?
                new ObjectParameter("quantidade_minima", quantidade_minima) :
                new ObjectParameter("quantidade_minima", typeof(int));
    
            var quantidade_maximaParameter = quantidade_maxima.HasValue ?
                new ObjectParameter("quantidade_maxima", quantidade_maxima) :
                new ObjectParameter("quantidade_maxima", typeof(int));
    
            var armazemParameter = armazem.HasValue ?
                new ObjectParameter("armazem", armazem) :
                new ObjectParameter("armazem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduto", codigoParameter, tipoParameter, descricaoParameter, quantidadeParameter, quantidade_minimaParameter, quantidade_maximaParameter, armazemParameter);
        }
    
        public virtual int InsertStock(Nullable<int> codigo_produto, Nullable<double> preco, Nullable<int> quantidade, Nullable<int> quantidade_minima, Nullable<int> quantidade_maxima, Nullable<int> fid)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            var precoParameter = preco.HasValue ?
                new ObjectParameter("preco", preco) :
                new ObjectParameter("preco", typeof(double));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("quantidade", quantidade) :
                new ObjectParameter("quantidade", typeof(int));
    
            var quantidade_minimaParameter = quantidade_minima.HasValue ?
                new ObjectParameter("quantidade_minima", quantidade_minima) :
                new ObjectParameter("quantidade_minima", typeof(int));
    
            var quantidade_maximaParameter = quantidade_maxima.HasValue ?
                new ObjectParameter("quantidade_maxima", quantidade_maxima) :
                new ObjectParameter("quantidade_maxima", typeof(int));
    
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStock", codigo_produtoParameter, precoParameter, quantidadeParameter, quantidade_minimaParameter, quantidade_maximaParameter, fidParameter);
        }
    
        public virtual int InsertVenda(Nullable<int> fid, Nullable<int> cid, Nullable<int> tid, Nullable<int> codigo_produto, Nullable<double> preco_venda, Nullable<int> quantidade)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(int));
    
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            var preco_vendaParameter = preco_venda.HasValue ?
                new ObjectParameter("preco_venda", preco_venda) :
                new ObjectParameter("preco_venda", typeof(double));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("quantidade", quantidade) :
                new ObjectParameter("quantidade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVenda", fidParameter, cidParameter, tidParameter, codigo_produtoParameter, preco_vendaParameter, quantidadeParameter);
        }
    
        public virtual ObjectResult<MediaVendaProdutoAnoCorrente_Result> MediaVendaProdutoAnoCorrente(Nullable<int> codigo_produto)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MediaVendaProdutoAnoCorrente_Result>("MediaVendaProdutoAnoCorrente", codigo_produtoParameter);
        }
    
        public virtual int PedidoProdutoFornecedor(Nullable<int> codigo_produto, Nullable<int> quantidade, Nullable<System.DateTime> data)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("quantidade", quantidade) :
                new ObjectParameter("quantidade", typeof(int));
    
            var dataParameter = data.HasValue ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PedidoProdutoFornecedor", codigo_produtoParameter, quantidadeParameter, dataParameter);
        }
    
        public virtual ObjectResult<RespostaPedidoFornecedor_Result> RespostaPedidoFornecedor(Nullable<int> codigo_produto)
        {
            var codigo_produtoParameter = codigo_produto.HasValue ?
                new ObjectParameter("codigo_produto", codigo_produto) :
                new ObjectParameter("codigo_produto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RespostaPedidoFornecedor_Result>("RespostaPedidoFornecedor", codigo_produtoParameter);
        }
    
        public virtual int UpdateFranqueado(Nullable<int> fid, Nullable<int> nif, string nome, string morada)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            var moradaParameter = morada != null ?
                new ObjectParameter("morada", morada) :
                new ObjectParameter("morada", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFranqueado", fidParameter, nifParameter, nomeParameter, moradaParameter);
        }
    
        public virtual int UpdateProduto(Nullable<int> codigo, string tipo, string descricao, Nullable<int> quantidade, Nullable<int> quantidade_minima, Nullable<int> quantidade_maxima, Nullable<int> armazem)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("descricao", descricao) :
                new ObjectParameter("descricao", typeof(string));
    
            var quantidadeParameter = quantidade.HasValue ?
                new ObjectParameter("quantidade", quantidade) :
                new ObjectParameter("quantidade", typeof(int));
    
            var quantidade_minimaParameter = quantidade_minima.HasValue ?
                new ObjectParameter("quantidade_minima", quantidade_minima) :
                new ObjectParameter("quantidade_minima", typeof(int));
    
            var quantidade_maximaParameter = quantidade_maxima.HasValue ?
                new ObjectParameter("quantidade_maxima", quantidade_maxima) :
                new ObjectParameter("quantidade_maxima", typeof(int));
    
            var armazemParameter = armazem.HasValue ?
                new ObjectParameter("armazem", armazem) :
                new ObjectParameter("armazem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduto", codigoParameter, tipoParameter, descricaoParameter, quantidadeParameter, quantidade_minimaParameter, quantidade_maximaParameter, armazemParameter);
        }
    
        public virtual int VerificaOfertas(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VerificaOfertas", pidParameter);
        }
    }
}
